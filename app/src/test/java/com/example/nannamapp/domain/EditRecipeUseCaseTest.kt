package com.example.nannamapp.domain

import com.example.namnam.data.model.Category
import com.example.namnam.data.model.CookinginstructionDomain
import com.example.namnam.data.model.RecipeDomain
import com.example.nannamapp.data.RecipesRepository
import com.example.nannamapp.data.model.NewRecipePost
import com.example.nannamapp.data.model.RecipeHasIngredient
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.RelaxedMockK
import kotlinx.coroutines.runBlocking
import org.junit.Before
import org.junit.Test


class EditRecipeUseCaseTest{
    @RelaxedMockK
    lateinit var repository: RecipesRepository
    private lateinit var editRecipeUseCase : EditRecipeUseCase
    lateinit var newRecipe: NewRecipePost

    @Before
    fun onBefore(){
        MockKAnnotations.init(this)
        val recipeDomain = RecipeDomain(
             "r1",
             "123",
             "Salsa Verde",
             "",
             "",
             "i1",
             2,
            ""
        )

        val instruction1 = CookinginstructionDomain(
             "",
             "Tatemar los tomates",
             1,
             "r1"
        )

        val instruction2 = CookinginstructionDomain(
             "",
             "Tatemar los chiles",
             2,
             "r1"
        )

        val instruction3 = CookinginstructionDomain(
             "",
            "Tatemar la cebolla",
             3,
             "r1"
        )

        val category = Category(
            "c3",
             "Salsas"
        )

        val recipeHasIngredient = RecipeHasIngredient(
            "i1",
             "r1",
             201
        )

        // Crear la instancia del objeto principal
        newRecipe = NewRecipePost(
            recipeDomain = recipeDomain,
            instructions = listOf<CookinginstructionDomain>(instruction1, instruction2, instruction3),
            category = category,
            recipeHasIngredients = listOf<RecipeHasIngredient>(recipeHasIngredient)
        )
        editRecipeUseCase = EditRecipeUseCase(newRecipe)
    }

    @Test
    fun `when response is ok then return 200`() = runBlocking{
        //Given
        coEvery { repository.editRecipe(newRecipe) }
        //when
        val response =  editRecipeUseCase()

        //Then
        assert(response == 200)
    }
    @Test
    fun `when response is ok then return 400`() = runBlocking{
        //Given
        coEvery { repository.editRecipe(newRecipe) }
        //when
        val response =  editRecipeUseCase()

        //Then
        assert(response == 400)
    }

    @Test
    fun `when response is ok then return 500`() = runBlocking{
        //Given
        coEvery { repository.editRecipe(newRecipe) }
        //when
        val response =  editRecipeUseCase()

        //Then
        assert(response == 500)
    }
}